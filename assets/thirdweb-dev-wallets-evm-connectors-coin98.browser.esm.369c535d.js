import{b as u,w as m,am as p}from"./index.f777a6be.js";import{a as l,U as d,R as w}from"./errors-3055a99c.browser.esm.77830c12.js";import{InjectedConnector as f}from"./thirdweb-dev-wallets-evm-connectors-injected.browser.esm.60155205.js";import{b as g}from"./thirdweb-dev-wallets.browser.esm.ef42756e.js";import"./url-bc88b2b6.browser.esm.c2527b16.js";import"./normalizeChainId-e4cc0175.browser.esm.042707b7.js";import"./index.es.9cbfc799.js";import"./index.33ea6e67.js";import"./constants-1ba9df2b.browser.esm.1400d5f9.js";class P extends f{constructor(t){const o={...{name:"Coin98 Wallet",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:g},...t.options};super({chains:t.chains,options:o,connectorStorage:t.connectorStorage}),u(this,"id",m.coin98)}async connect(){var r,o;let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const e=await this.getProvider();if(!e)throw new l;this.setupListeners(),this.emit("message",{type:"connecting"});let n=null;if(((r=this.options)==null?void 0:r.shimDisconnect)&&!Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))&&(n=await this.getAccount().catch(()=>null),!!n))try{await e.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(h){if(this.isUserRejectedRequestError(h))throw new d(h)}if(!n){const s=await e.request({method:"eth_requestAccounts"});n=p(s[0])}let i=await this.getChainId(),c=this.isChainUnsupported(i);if(t.chainId&&i!==t.chainId)try{await this.switchChain(t.chainId),i=t.chainId,c=this.isChainUnsupported(t.chainId)}catch(s){console.error(`Could not switch to chain id : ${t.chainId}`,s)}(o=this.options)!=null&&o.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const a={chain:{id:i,unsupported:c},provider:e,account:n};return this.emit("connect",a),a}catch(e){throw this.isUserRejectedRequestError(e)?new d(e):e.code===-32002?new w(e):e}}}export{P as Coin98Connector};
