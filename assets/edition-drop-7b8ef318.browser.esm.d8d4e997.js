var u=Object.defineProperty;var d=(s,e,t)=>e in s?u(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var o=(s,e,t)=>(d(s,typeof e!="symbol"?e+"":e,t),t);import{B as g,aU as C,aV as f,aW as w,aX as W,aY as y,aZ as T,ax as A,a_ as i,a$ as R}from"./index.f777a6be.js";import{C as E,a as k,b as S,G as b}from"./contract-appuri-a02661ad.browser.esm.82713302.js";import{C as v}from"./contract-interceptor-6f8989ff.browser.esm.79a9b943.js";import{C as O,a as B}from"./contract-owner-2f6b3b38.browser.esm.bae7b919.js";import{C as I}from"./contract-platform-fee-9718f114.browser.esm.57e50877.js";import{C as N}from"./contract-roles-d2fece90.browser.esm.796c750f.js";import{C as P}from"./contract-sales-cb9b8e5f.browser.esm.3e65b6ca.js";import{D as _}from"./erc-1155-4fde2d29.browser.esm.2676e4a8.js";import{S as F}from"./erc-1155-standard-655aeee5.browser.esm.16d95a75.js";import{P as x}from"./thirdweb-checkout-b9754534.browser.esm.e93b4a81.js";import"./setErc20Allowance-b3e3abb0.browser.esm.1a036e08.js";import"./QueryParams-2cf39be7.browser.esm.031172c2.js";import"./index.acb7dca8.js";import"./assertEnabled-c4c4cb1b.browser.esm.493f038e.js";class U{constructor(e){this.events=e}async getAllClaimerAddresses(e){const t=(await this.events.getEvents("TokensClaimed")).filter(r=>r.data&&g.isBigNumber(r.data.tokenId)?r.data.tokenId.eq(e):!1);return Array.from(new Set(t.filter(r=>{var a;return typeof((a=r.data)==null?void 0:a.claimer)=="string"}).map(r=>r.data.claimer)))}}const h=class extends F{constructor(t,r,a){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},c=arguments.length>4?arguments[4]:void 0,m=arguments.length>5?arguments[5]:void 0,l=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new f(t,r,c,n,a);super(l,a,m);o(this,"createBatch",i(async(t,r)=>this.erc1155.lazyMint.prepare(t,r)));o(this,"claimTo",i((()=>{var t=this;return async function(r,a,n){let c=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return t.erc1155.claimTo.prepare(r,a,n,{checkERC20Allowance:c})}})()));o(this,"claim",i((()=>{var t=this;return async function(r,a){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;const c=await t.contractWrapper.getSignerAddress();return t.claimTo.prepare(c,r,a,n)}})()));o(this,"burnTokens",i(async(t,r)=>this.erc1155.burn.prepare(t,r)));this.abi=w.parse(c),this.metadata=new E(this.contractWrapper,W,this.storage),this.app=new k(this.contractWrapper,this.metadata,this.storage),this.roles=new N(this.contractWrapper,h.contractRoles),this.royalties=new O(this.contractWrapper,this.metadata),this.sales=new P(this.contractWrapper),this.claimConditions=new _(this.contractWrapper,this.metadata,this.storage),this.events=new S(this.contractWrapper),this.history=new U(this.events),this.encoder=new y(this.contractWrapper),this.estimator=new b(this.contractWrapper),this.platformFees=new I(this.contractWrapper),this.interceptor=new v(this.contractWrapper),this.checkout=new x(this.contractWrapper),this.owner=new B(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t,r){return this.erc1155.getOwned(t,r)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[T("transfer"),A])}async getClaimTransaction(t,r,a){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return this.erc1155.getClaimTransaction(t,r,a,{checkERC20Allowance:n})}async prepare(t,r,a){return R.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:a})}async call(t,r,a){return this.contractWrapper.call(t,r,a)}};let p=h;o(p,"contractRoles",C);export{p as EditionDrop};
