var w=Object.defineProperty;var C=(i,e,t)=>e in i?w(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var o=(i,e,t)=>(C(i,typeof e!="symbol"?e+"":e,t),t);import{ax as u,B as g,bS as y,aU as b,aV as T,aW as E,cN as S,aY as v,bb as f,aZ as R,a_ as p,a$ as W}from"./index.f777a6be.js";import{C as A,a as B,b as O,G as V}from"./contract-appuri-a02661ad.browser.esm.82713302.js";import{C as F}from"./contract-interceptor-6f8989ff.browser.esm.79a9b943.js";import{C as x}from"./contract-platform-fee-9718f114.browser.esm.57e50877.js";import{C as M}from"./contract-roles-d2fece90.browser.esm.796c750f.js";import{C as N}from"./contract-sales-cb9b8e5f.browser.esm.3e65b6ca.js";import{a as P}from"./erc-20-c62f87b1.browser.esm.7d765306.js";import{S as D}from"./erc-20-standard-08e06497.browser.esm.b3baa481.js";import"./assertEnabled-c4c4cb1b.browser.esm.493f038e.js";import"./drop-claim-conditions-3a72a6b2.browser.esm.287205e2.js";import"./index.acb7dca8.js";import"./setErc20Allowance-b3e3abb0.browser.esm.1a036e08.js";class H{constructor(e,t){this.contractWrapper=e,this.events=t}async getAllHolderBalances(){const t=(await this.events.getEvents("Transfer")).map(a=>a.data),r={};t.forEach(a=>{const n=a==null?void 0:a.from,c=a==null?void 0:a.to,d=a==null?void 0:a.value;n!==u&&(n in r||(r[n]=g.from(0)),r[n]=r[n].sub(d)),c!==u&&(c in r||(r[c]=g.from(0)),r[c]=r[c].add(d))});const s=Object.entries(r),h=await Promise.all(s.map(a=>{let[,n]=a;return y(this.contractWrapper.getProvider(),this.contractWrapper.address,n)}));return s.map((a,n)=>{let[c]=a;return{holder:c,balance:h[n]}})}}const m=class extends D{constructor(t,r,s){let h=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},a=arguments.length>4?arguments[4]:void 0,n=arguments.length>5?arguments[5]:void 0,c=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new T(t,r,a,h,s);super(c,s,n);o(this,"mint",p(async t=>this.erc20.mint.prepare(t)));o(this,"mintTo",p(async(t,r)=>this.erc20.mintTo.prepare(t,r)));o(this,"mintBatchTo",p(async t=>this.erc20.mintBatchTo.prepare(t)));o(this,"delegateTo",p(async t=>W.fromContractWrapper({contractWrapper:this.contractWrapper,method:"delegate",args:[await f(t)]})));o(this,"burn",p(t=>this.erc20.burn.prepare(t)));o(this,"burnFrom",p(async(t,r)=>this.erc20.burnFrom.prepare(t,r)));this.abi=E.parse(a||[]),this.metadata=new A(this.contractWrapper,S,this.storage),this.app=new B(this.contractWrapper,this.metadata,this.storage),this.roles=new M(this.contractWrapper,m.contractRoles),this.sales=new N(this.contractWrapper),this.events=new O(this.contractWrapper),this.history=new H(this.contractWrapper,this.events),this.encoder=new v(this.contractWrapper),this.estimator=new V(this.contractWrapper),this.platformFees=new x(this.contractWrapper),this.interceptor=new F(this.contractWrapper),this.signature=new P(this.contractWrapper,this.roles)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.erc20.getValue(await this.contractWrapper.read("getVotes",[t]))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.read("delegates",[await f(t)])}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[R("transfer"),u])}async getMintTransaction(t,r){return this.erc20.getMintTransaction(t,r)}async prepare(t,r,s){return W.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:s})}async call(t,r,s){return this.contractWrapper.call(t,r,s)}};let l=m;o(l,"contractRoles",b);export{l as Token};
